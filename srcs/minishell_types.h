/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   minishell_types.h                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmatis <tmatis@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/04/08 11:28:20 by tmatis            #+#    #+#             */
/*   Updated: 2021/05/22 18:41:40 by tmatis           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef MINISHELL_TYPES_H

# define MINISHELL_TYPES_H

# include "minishell.h"

/*
** size: the actual size of the buffer.
** position: ths position of the cursor from the back ____[]__ position = 2.
** buff: string allocated on the heap null terminated.
** escape_id: The id of the escape sequence. Generated by get_escape_id;
** manage_history: true of false, tell if the history should be managed
*/

typedef struct s_buffer
{
	int		size;
	int		pos_before_cursor;
	char	*buff;
	int		escape_id;
	char	*status;
	t_bool	manage_history;
	int		history_lvl;
	t_bool	error;
}				t_buffer;

typedef struct s_redir
{
	int		type;
	char	*file;
}				t_redir;

typedef struct s_command
{
	char	*name;
	char	*cmd;
	t_bool	is_set;
	t_list	*args;
	t_list	*redirs;
}				t_command;

typedef struct s_var
{
	char	*key;
	char	*data;
}			t_var;

typedef int	t_tube[2];

typedef struct s_append
{
	t_bool start;
	t_bool end;
	t_bool dollar_error;
	t_bool just_pipes;
}				t_append;

typedef struct s_child_data
{
	t_command 	command;
	t_tube		*tube_list;
	int 		fork_n;
	int 		forks_running;
	t_list		**env_var;
}				t_child_data;

#endif
